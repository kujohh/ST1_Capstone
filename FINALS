
#QUESTION 1#
import pandas as pd 
df = pd.read_csv('gold_price.csv')
print(df.iloc[:,:5])


#QUESTION 4#

#Prints Plot Line Diagram For Closing Price#
import pandas as pd 
import matplotlib.pyplot as plt

df=pd.read_csv('gold_price.csv')
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date',inplace=True)
df['Close'].plot(kind='line',figsize=(15,10),color='pink')
plt.xticks(df.index[::50],rotation=45)
plt.xlabel('Date')
plt.ylabel('Close')
plt.title('Close Price Over Time')
plt.show()

#Prints Plot Line Diagram For High and Low Price#

import pandas as pd 
import matplotlib.pyplot as plt

df=pd.read_csv('gold_price.csv')
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date',inplace=True)
df['High'].plot(kind='line',figsize=(15,10),color='green')
df['Low'].plot(kind='line',figsize=(15,10),color='red')
plt.xticks(df.index[::50],rotation=45)
plt.xlabel('Date')
plt.ylabel('Price')
plt.title('High and Low Prices of Gold Over Time')

plt.legend()
plt.show()


#QUESTION 5#

#Basic Data Exploration#

import pandas as pd 

df=pd.read_csv('gold_price.csv')
print(df.info())
print(df.describe())
print('duplicate rows:',
      df.duplicated().sum())


#QUESTION 6#
#Wanted Columns:Date, High, Low, Close#
#High, Low and Close can all be altered by adding the appropriate prefix to the object names in the code.
eg. 'High, Low, Close' become: 'SP_Open, SP_Low, SP_Close'#

#QUESTION 7#

#histogram#
#produces Close price histogram#

import pandas as pd 
import matplotlib.pyplot as plt
df=pd.read_csv('gold_price.csv')
plt.figure(figsize=(15,10))
plt.title('Gold Price Histogram')
plt.xlabel('Gold Close Price')
plt.ylabel('Frequency')
plt.hist(df['Close'], bins =50, color='pink',edgecolor='black')
plt.show()

##barchart#
#produces Low price barchart#

import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv('gold_price.csv')
price_low = df['Low'].value_counts()
plt.figure(figsize=(15,5))
plt.title('Gold Price Bar Plot')
plt.xlabel('Gold Close Price')
plt.ylabel('Frequency')
plt.bar(price_low.index, price_low.values, color='blue', width=0.05, label='Low Price')
plt.xticks(range(int(price_counts.index.min()), int(price_counts.index.max())+1, 5))
plt.legend()
plt.show()

#produces High price bar chart#

import pandas as pd
import matplotlib.pyplot as plt
df = pd.read_csv('gold_price.csv')
price_high = df['High'].value_counts()
plt.figure(figsize=(15,5))
plt.title('Gold Price Bar Plot')
plt.xlabel('Gold Close Price')
plt.ylabel('Frequency')
plt.bar(price_high.index, price_high.values, color='green', width=0.05, label='Low Price')
plt.xticks(range(int(price_counts.index.min()), int(price_counts.index.max())+1, 5))
plt.legend()
plt.show()

#QUESTION 8#
#producing a pairplot diagram to better visualise data and outliers#

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('gold_price.csv')
columns=['High','Low','Open','Close']
sns.pairplot(df[columns])
plt.show()

#Since the target is Close. Open, High and Low are the selected features#
#Volume will not be considered since it adds too much variation to the machine learning models#


#QUESTION 9#
#Removal of Outliers Visualised as a Pairplot Diagram#
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import numpy as np

df = pd.read_csv('gold_price.csv')
X = df[['Open', 'High', 'Low']]
Y = df['Close']

model = LinearRegression()
model.fit(X, Y)

predicted_Y = model.predict(X)

absolute_diff = np.abs(Y - predicted_Y)
outlier_threshold = 0.25
outliers = absolute_diff > outlier_threshold

clean_X = X[~outliers]
clean_Y = Y[~outliers]

cleaned_model = LinearRegression()
cleaned_model.fit(clean_X, clean_Y)

clean_df = pd.concat([clean_X, clean_Y], axis=1)
sns.pairplot(clean_df)
plt.show()

#QUESTION 12 and QUESTION 13#


#LINEAR REGRESSION MODEL#
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import mean_absolute_error
df=pd.read_csv('gold_price.csv')

# Feature selection (you might want to choose different features)
features = ['Open', 'High', 'Low']

# Creating feature matrix X and target vector y
X = df[features]
Y = df['Close']

# Train-test split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=30)

# Model initialization and training
model = LinearRegression()
model.fit(X_train, Y_train)

# Prediction
Y_pred = model.predict(X_test)
# Model evaluation
mse = mean_squared_error(Y_test, Y_pred)
print(f'Mean Squared Error: {mse}')
# Mean Absolute Error (MAE)
mae = mean_absolute_error(Y_test, Y_pred)
print(f'Mean Absolute Error: {mae}')

# R-squared
r2 = r2_score(Y_test, Y_pred)
print(f'R-squared: {r2}')

#POLYNOMIAL#
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv('gold_price.csv')

X = df[['Open', 'High', 'Low']]
Y = df['Close']

# Splitting the data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=35)

# Polynomial features transformation
poly = PolynomialFeatures(degree=3)
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Fitting the polynomial regression model
model = LinearRegression()
model.fit(X_train_poly, Y_train)

# Predicting on the test set
Y_pred = model.predict(X_test_poly)

mse = mean_squared_error(Y_test, Y_pred)
print(f'Mean Squared Error: {mse}')
mae = mean_absolute_error(Y_test, Y_pred)
print(f'Mean Absolute Error: {mae}')

r2 = r2_score(Y_test, Y_pred)
print(f'R-squared: {r2}')

#Polynomial Regression produces better results and will therefore be the one that is to be deployed#

