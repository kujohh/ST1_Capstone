#Linear#
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import mean_absolute_error
df=pd.read_csv('gold_price.csv')

features = ['Open', 'High', 'Low', 'Volume']
X = df[features]
y = df['Close']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
# Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# R-squared
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')

#Mean Squared Error: 0.11450625215156787#
#Mean Absolute Error: 0.2254835940247221#
#R-squared: 0.9996326141594112#

#Polynomial#
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Read the CSV file
data = pd.read_csv('your_file.csv')

# Extracting features and target variable
X = data[['Open', 'High', 'Low']]
y = data['Close']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Polynomial features transformation
poly = PolynomialFeatures(degree=2)  # You can change the degree of the polynomial
X_train_poly = poly.fit_transform(X_train)
X_test_poly = poly.transform(X_test)

# Fitting the polynomial regression model
model = LinearRegression()
model.fit(X_train_poly, y_train)

# Predicting on the test set
y_pred = model.predict(X_test_poly)

# Calculating Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
# Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# R-squared
r2 = r2_score(y_test, y_pred)
print(f'R-squared: {r2}')
